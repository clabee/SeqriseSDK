package Seqrise::Task;
#!/usr/bin/perl -w
use strict;
use Carp;
use Graph::Easy;
use Graph::Easy::Edge;
use File::Basename;


sub new {
	my ($class, %params) = @_;
	my $self = bless {
		name => undef,
		cpu => 1,
		memory => "5G",
		inputs => [],
		outputs => [],
		cammands => [],
		index => 0,
		dependented => 0
	}, $class;

	my ($k, $v);
	my $errs = 0;
	if (defined ($v = delete $params{name})) {
		$self->{name} = $v;
	}

	if (defined ($v = delete $params{cpu})) {
		$self->{cpu} = $v;
	}

	if (defined ($v = delete $params{memory})) {
		$self->{memory} = $v;
	}
	while (($k, $v) = each %params) {
		carp "Unknown named parameter `$k=>$v`";
		$errs++;
	}

	return undef if $errs;
	return $self;
}

sub AddInput {
	my ($self, $input) = @_;
	push @{$self->{inputs}}, $input;
}

sub AddInputs {
	my $self = shift;
	my @inputs = @_;
	foreach my $input (@inputs) {
		push @{$self->{inputs}}, $input;
	}
}

sub AddOutput {
	my $self = shift;
	my $output = shift;
	push @{$self->{outputs}}, $output;
}

sub AddOutputs {
	my $self = shift;
	my @outputs = @_;
	foreach my $output (@outputs) {
		push @{$self->{outputs}}, $output;
	}
}

sub AddCommand {
	my $self = shift;
	my $command = shift;
	push @{$self->{commands}}, $command;
}

sub set_index {
	my $self = shift;
	my $index = shift;
	$self->{index} = $index;
}

sub get_index {
	my $self = shift;
	return $self->{index};
}

sub PrintTasks {
	my ($self, $task_shell, $ref_task_array) = @_;
	open FOUT, ">$task_shell" or die "Error: open file $task_shell failure:$!";
	foreach my $task (@{$ref_task_array}) {
		if ($task->{name}) {
			print FOUT "#name=".$task->{name}."\n";
		}
		else {
			print FOUT "#name=null";
		}
		print FOUT "#cpu=".$task->{cpu}."\n";
		print FOUT "#memory=".$task->{memory}."\n";
		foreach my $input (@{$task->{inputs}}) {
			print FOUT "#input=".$input."\n";
		}
		foreach my $output (@{$task->{outputs}}) {
			print FOUT "#output=".$output."\n";
		}
		foreach my $cmd (@{$task->{commands}}) {
			print FOUT $cmd."\n";
		}
	}
}


sub output2task {
	my ($self, $ref_task_array) = @_;
	my %output2task;
	my $i = 1;
	foreach my $task (@{$ref_task_array}) {
		foreach my $output (@{$task->{outputs}}){
			if (not exists $output2task{$output}) {
				$task->set_index($i);
				$output2task{$output} = $task;
			}
			else {
				die "Error: Output file $output generated by more than one tool\n";
			}
		}
		$i ++;
	}
	return \%output2task;
}


sub print_graph {
	my ($self, $ref_task_array) = @_;
	my ($output2task) = $self->output2task($ref_task_array);
	my $graph = Graph::Easy->new();
	my ($edge, $from, $to);
	foreach my $task (@{$ref_task_array}) {
		my $i = 1;
		foreach my $input (@{$task->{inputs}}) {
			if (not exists $output2task->{$input}) {
				$from = $graph->add_node('Input'.$task->{index}."_".$i);
				$from->set_attribute('shape', 'circle');
				$i++;
			}
			else {
				my $index = $output2task->{$input}->{index};
				$from = $graph->add_node($output2task->{$input}->{name}."$index");
				$from->set_attribute('label', $output2task->{$input}->{name});
				

			}
			my $index = $task->{index};
			$to = $graph->add_node($task->{name}."$index");
			$to->set_attribute('label', $task->{name});
			$edge = $graph->add_edge($from,  $to);
			my $edge_name = basename($input);
			$edge->set_attributes({label => $edge_name});
		}
	}
	print $graph->as_graphviz();
}

sub PrintGraph {
	my ($self, $svg, $ref_task_array) = @_;
	my ($output2task) = $self->output2task($ref_task_array);
	my $graph = Graph::Easy->new();
	my ($edge, $from, $to);
	foreach my $task (@{$ref_task_array}) {
		my $i = 1;
		foreach my $input (@{$task->{inputs}}) {
			if (not exists $output2task->{$input}) {
				$from = $graph->add_node('Input'.$task->{index}."_".$i);
				$from->set_attribute('shape', 'circle');
				$i++;
			}
			else {
				my $index = $output2task->{$input}->{index};
				$from = $graph->add_node($output2task->{$input}->{name}."$index");
				$from->set_attribute('label', $output2task->{$input}->{name});
				

			}
			my $index = $task->{index};
			$to = $graph->add_node($task->{name}."$index");
			$to->set_attribute('label', $task->{name});
			$edge = $graph->add_edge($from,  $to);
			my $edge_name = basename($input);
			$edge->set_attributes({label => $edge_name});
		}
	}
	my $dot = $svg.".dot";
	open FOUT, ">$dot" or die "Error:Open file $dot failure:$!";
	print FOUT $graph->as_graphviz();
	system("dot -Tsvg -o $svg $dot && rm -f $dot");
}


1;

